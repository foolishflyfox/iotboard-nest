{
    "tag": "component/基础/gauge",
    "appearanceTypes": [
        "x",
        "y",
        "width",
        "height"
    ],
    "customPropertyCfgs": {
        "value": {
            "setter": "function(v) {\n        this._value = v;\n      }",
            "defaultValue": 66
        },
        "min": {
            "defaultValue": 11
        },
        "max": {
            "defaultValue": 100
        },
        "unit": {
            "defaultValue": "km/h"
        }
    },
    "defaultAppearanceValues": {
        "width": 80,
        "height": 80
    },
    "updateBoxBounds": "function() {\n    const box = this.__layout.boxBounds;\n    const { width, height } = this.__;\n    box.x = 0;\n    box.y = 0;\n    box.width = width;\n    box.height = height;\n  }",
    "drawHitPath": "function(hitCanvas) {\n    const { context } = hitCanvas;\n    const { width, height } = this.__layout.boxBounds;\n    context.save();\n    context.scale(width / 400, height / 400);\n    context.beginPath();\n    context.arc(200, 200, 200 * 0.95, 0, Math.PI * 2);\n    context.restore();\n  }",
    "hit": "function(inner) {\n    const { context } = this.__hitCanvas;\n    if (context.isPointInPath(inner.x, inner.y)) return true;\n    const lineWidth = inner.radiusX * 2;\n    if (context.lineWidth !== lineWidth) {\n      context.lineWidth = lineWidth;\n      context.stroke();\n    }\n    return context.isPointInStroke(inner.x, inner.y);\n  }",
    "draw": "function(canvas) {\n    const ctx = canvas.context;\n    const obj = this.__;\n    ctx.scale(obj.width / 400, obj.height / 400);\n    const x = 0;\n    const y = 0;\n    const width = 400;\n    const height = 400;\n    const side = Math.min(width, height);\n    canvas.setStrokeOptions(this.__);\n    const cx = x + width / 2;\n    const cy = y + height / 2;\n    const r_in = Math.min(width, height) / 2 * 0.65;\n    const r_out = Math.min(width, height) / 2 * 0.9;\n    const arc_angle = Math.PI * 2;\n    ctx.beginPath();\n    const gra = ctx.createLinearGradient(cx, cy - r_in, cx, cy + r_in);\n    gra.addColorStop(0, \"#3485DB\");\n    gra.addColorStop(1, \"#1A3494\");\n    ctx.fillStyle = gra;\n    ctx.arc(cx, cy, r_in, 0, arc_angle);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.strokeStyle = \"#E2E7FB\";\n    ctx.lineWidth = 25;\n    ctx.lineCap = \"round\";\n    const start_out = 1 / 4 + 1 / 12;\n    const end_out = 1 + 1 / 6;\n    ctx.arc(cx, cy, r_out, arc_angle * start_out, arc_angle * end_out);\n    ctx.stroke();\n    const valComp = Number(this.value);\n    const val = isNaN(valComp) ? 0 : valComp;\n    const unit = this.unit;\n    const max = Number(this.max);\n    const min = Number(this.min);\n    ctx.beginPath();\n    ctx.lineWidth = 40;\n    ctx.lineCap = \"round\";\n    const start = 1 / 4 + 1 / 4 * 2 / 5;\n    const end = 1 + 1 / 4 * 3 / 5;\n    const turbo = (end - start) * (val / max);\n    const left_s = val <= max / 2 ? turbo : (end - start) / 2;\n    const gra2_1 = ctx.createLinearGradient(\n      x + width / 2,\n      y + height * 0.1,\n      x + width / 2,\n      y + height * 0.8\n    );\n    gra2_1.addColorStop(0, \"#7BB9F0\");\n    gra2_1.addColorStop(1, \"#91FFFD\");\n    ctx.strokeStyle = gra2_1;\n    ctx.arc(cx, cy, r_out, arc_angle * start_out, arc_angle * (start + left_s));\n    ctx.stroke();\n    if (val > max / 2) {\n      ctx.beginPath();\n      const gra2_2 = ctx.createLinearGradient(\n        x + width / 2,\n        y + height * 0.1,\n        x + width / 2,\n        y + height * 0.8\n      );\n      gra2_2.addColorStop(0, \"#7BB9F0\");\n      gra2_2.addColorStop(1, \"#5748DA\");\n      ctx.strokeStyle = gra2_2;\n      ctx.arc(cx, cy, r_out, arc_angle * 3 / 4, arc_angle * (start + turbo + 1 / 80));\n      ctx.stroke();\n    }\n    const start_range = 1 / 4 * 4 / 5;\n    const end_range = 1 / 4 + 1 / 4 * 1 / 5;\n    ctx.beginPath();\n    const gra4 = ctx.createLinearGradient(x + width / 3, height, x + width * 2 / 3, height);\n    gra4.addColorStop(0, \"#F4F5F8\");\n    gra4.addColorStop(0.5, \"#488CDF\");\n    gra4.addColorStop(1, \"#F4F5F8\");\n    ctx.strokeStyle = gra4;\n    ctx.lineWidth = 8;\n    ctx.arc(cx, cy, r_out, arc_angle * start_range, arc_angle * end_range);\n    ctx.stroke();\n    ctx.font = \"24px Arial\";\n    const max_x = cx + Math.cos(4 * 18 * Math.PI / 180) * (r_out + 24);\n    const max_y = cy + Math.sin(4 * 18 * Math.PI / 180) * (r_out + 24);\n    ctx.fillText(max.toString(), max_x, max_y - 2);\n    const min_x = cx + Math.cos(6 * 18 * Math.PI / 180) * (r_out + 24);\n    const min_y = cy + Math.sin(6 * 18 * Math.PI / 180) * (r_out + 24);\n    ctx.fillText(min.toString(), min_x - 12, min_y - 2);\n    let theta = 0;\n    for (let i = 0; i < 20; i += 1) {\n      if (i > 3 && i < 7) {\n        theta += 18 * Math.PI / 180;\n        continue;\n      }\n      ctx.beginPath();\n      const line_begin = {\n        x: cx + Math.cos(theta) * (r_out - 30),\n        y: cy + Math.sin(theta) * (r_out - 30)\n      };\n      const line_end = {\n        x: cx + Math.cos(theta) * (r_out - 24),\n        y: cy + Math.sin(theta) * (r_out - 24)\n      };\n      ctx.moveTo(line_begin.x, line_begin.y);\n      ctx.lineTo(line_end.x, line_end.y);\n      ctx.lineWidth = 6;\n      ctx.strokeStyle = \"#3639CB\";\n      ctx.stroke();\n      theta += 18 * Math.PI / 180;\n    }\n    const clockRadius = width / 2;\n    ctx.save();\n    ctx.translate(clockRadius, clockRadius);\n    ctx.beginPath();\n    ctx.save();\n    const theta2 = ((20 - 4) * (val / max) + 7) * 2 * Math.PI / 20;\n    ctx.rotate(theta2);\n    ctx.beginPath();\n    ctx.moveTo(-10, -8);\n    ctx.lineTo(-10, 8);\n    ctx.lineTo(width / 2 * 0.9, 4);\n    ctx.lineTo(width / 2 * 0.9, -4);\n    const gra3 = ctx.createLinearGradient(-10, -8, width / 2 * 0.9, 4);\n    gra3.addColorStop(0, \"#B9275E66\");\n    gra3.addColorStop(0.6, \"#E25878ff\");\n    ctx.fillStyle = gra3;\n    ctx.fill();\n    ctx.restore();\n    ctx.restore();\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"#FFF\";\n    ctx.font = \"60px Arial bolder\";\n    ctx.fillText(valComp.toString(), cx, cy - 20);\n    ctx.fillText(unit, cx, cy + 40);\n  }"
}